prgm program
id_lst input
id_lstT ,
id_lstT )
prgmT var
decs var
type integer
std_type integer
decsT var
type real
std_type real
decsT var
type array
std_type integer
decsT var
type array
std_type real
decsT var
type array
std_type integer
decsT functionÐBÐåÆ
prgmTT functionÐBÐåÆ
sub_decs functionÐBÐåÆ
sub_dec functionÐBÐåÆ
sub_head functionÐBÐåÆ
sub_headT :
std_type integer
sub_decT functionÐBÐåÆ
sub_decs functionÐBÐåÆ
sub_dec functionÐBÐåÆ
sub_head functionÐBÐåÆ
sub_headT :
std_type integer
sub_decT begin
cmpd_stmt begin
cmpd_stmtT end
sub_decsT begin
cmpd_stmt begin
cmpd_stmtT end
sub_decsT functionÐBÐåÆ
sub_dec functionÐBÐåÆ
sub_head functionÐBÐåÆ
sub_headT (
args (
param_lst x
type integer
std_type integer
param_lstT ;
type real
std_type real
param_lstT )
std_type real
sub_decT var
decs var
type real
std_type real
decsT var
type array
std_type real
decsT var
type integer
std_type integer
decsT functionÐBÐåÆ
sub_decTT functionÐBÐåÆ
sub_decs functionÐBÐåÆ
sub_dec functionÐBÐåÆ
sub_head functionÐBÐåÆ
sub_headT :
std_type integer
sub_decT var
decs var
type integer
std_type integer
decsT begin
sub_decTT begin
cmpd_stmt begin
cmpd_stmtT end
sub_decsT functionÐBÐåÆ
sub_dec functionÐBÐåÆ
sub_head functionÐBÐåÆ
sub_headT :
std_type integer
sub_decT begin
cmpd_stmt begin
cmpd_stmtT l
opt_stmt l
stmt_lst l
stmt l
var l
varT :=
varT IMM TYPEERR RET
expr 75
smpl_expr 75
term 75
factor 75
termT end
smpl_exprT end
exprT end
stmt_lstT end
stmt_lstT end break no tok consumption
sub_decsT functionÐBÐåÆ
sub_dec functionÐBÐåÆ
sub_head functionÐBÐåÆ
sub_headT :
std_type integer
sub_decT var
decs var
type integer
std_type integer
decsT begin
sub_decTT begin
cmpd_stmt begin
cmpd_stmtT end
sub_decsT functionÐBÐåÆ
sub_dec functionÐBÐåÆ
sub_head functionÐBÐåÆ
sub_headT (
args (
param_lst hello
type array
std_type integer
param_lstT )
std_type integer
sub_decT begin
cmpd_stmt begin
cmpd_stmtT while
opt_stmt while
stmt_lst while
stmt while
expr (
smpl_expr (
term (
factor (
expr a
smpl_expr a
term a
factor a
factorT =
termT =
smpl_exprT =
exprT =
smpl_expr hello
term hello
factor hello
factorT [
expr 2.5
smpl_expr 2.5
term 2.5
factor 2.5
termT ]
smpl_exprT ]
exprT ]
termT )
termT IMM TYPEERR RET
smpl_exprT )
smpl_exprT IMM TYPEERR RET
termT do
termT IMM TYPEERR RET
smpl_exprT do
smpl_exprT IMM TYPEERR RET
exprT do
exprT IMM TYPEERR RET
stmt begin
cmpd_stmt begin
cmpd_stmtT e
opt_stmt e
stmt_lst e
stmt e
var e
varT :=
expr c
smpl_expr c
term c
factor c
factorT end
termT end
smpl_exprT end
exprT end
stmt_lstT end
stmt_lstT end break no tok consumption
stmt_lstT end
stmt_lstT end break no tok consumption
sub_decsT begin
cmpd_stmt begin
cmpd_stmtT b
opt_stmt b
stmt_lst b
stmt b
var b
varT :=
expr e
smpl_expr e
term e
factor e
factorT +
termT +
smpl_exprT +
term 4.44
factor 4.44
termT ;
smpl_exprT ;
exprT ;
stmt_lstT ;
stmt b
var b
varT :=
expr (
smpl_expr (
term (
factor (
expr a
smpl_expr a
term a
factor a
factorT mod
termT mod
factor x
factorT )
termT )
smpl_exprT )
exprT )
termT /
factor x
factorT ;
termT ;
smpl_exprT ;
exprT ;
stmt_lstT ;
stmt while
expr (
smpl_expr (
term (
factor (
expr (
smpl_expr (
term (
factor (
expr a
smpl_expr a
term a
factor a
factorT >=
termT >=
smpl_exprT >=
exprT >=
smpl_expr 1
term 1
factor 1
termT )
smpl_exprT )
termT and
factor (
expr (
smpl_expr (
term (
factor (
expr b
smpl_expr b
term b
factor b
factorT <=
termT <=
smpl_exprT <=
exprT <=
smpl_expr e
term e
factor e
factorT )
termT )
smpl_exprT )
termT or
smpl_exprT or
term (
factor (
expr not
smpl_expr not
term not
factor not
factor (
expr a
smpl_expr a
term a
factor a
factorT =
termT =
smpl_exprT =
exprT =
smpl_expr c
term c
factor c
factorT )
termT )
smpl_exprT )
termT )
smpl_exprT )
exprT )
termT )
smpl_exprT )
exprT )
termT )
smpl_exprT )
exprT )
termT do
smpl_exprT do
exprT do
stmt begin
cmpd_stmt begin
cmpd_stmtT c
opt_stmt c
stmt_lst c
stmt c
var c
varT :=
expr 2.5E2
smpl_expr 2.5E2
term 2.5E2
factor 2.5E2
termT end
smpl_exprT end
exprT end
stmt_lstT end
stmt_lstT end break no tok consumption
stmt_lstT ;
stmt fun2
var fun2
varT :=
expr 2.5
smpl_expr 2.5
term 2.5
factor 2.5
termT end
smpl_exprT end
exprT end
stmt_lstT end
stmt_lstT end break no tok consumption
sub_decsT begin
cmpd_stmt begin
cmpd_stmtT b
opt_stmt b
stmt_lst b
stmt b
var b
varT :=
expr fun2
smpl_expr fun2
term fun2
factor fun2
factorT (
expr_lst 2
expr 2
smpl_expr 2
term 2
factor 2
termT ,
smpl_exprT ,
exprT ,
expr_lstT ,
expr f
smpl_expr f
term f
factor f
factorT [
expr 5
smpl_expr 5
term 5
factor 5
termT ]
smpl_exprT ]
exprT ]
termT )
smpl_exprT )
exprT )
expr_lstT )
termT ;
smpl_exprT ;
exprT ;
stmt_lstT ;
stmt if
expr (
smpl_expr (
term (
factor (
expr a
smpl_expr a
term a
factor a
factorT >
termT >
smpl_exprT >
exprT >
smpl_expr 2
term 2
factor 2
termT )
smpl_exprT )
termT then
smpl_exprT then
exprT then
stmt a
var a
varT :=
expr 2
smpl_expr 2
term 2
factor 2
termT else
smpl_exprT else
exprT else
stmtT else
stmt a
var a
varT :=
expr a
smpl_expr a
term a
factor a
factorT +
termT +
smpl_exprT +
term 2
factor 2
termT ;
smpl_exprT ;
exprT ;
stmt_lstT ;
stmt if
expr (
smpl_expr (
term (
factor (
expr b
smpl_expr b
term b
factor b
factorT >
termT >
smpl_exprT >
exprT >
smpl_expr 4.2
term 4.2
factor 4.2
termT )
smpl_exprT )
termT then
smpl_exprT then
exprT then
stmt a
var a
varT :=
expr c
smpl_expr c
term c
factor c
factorT [
expr a
smpl_expr a
term a
factor a
factorT ]
termT ]
smpl_exprT ]
exprT ]
termT end
smpl_exprT end
exprT end
stmtT end
stmt_lstT end
stmt_lstT end break no tok consumption
