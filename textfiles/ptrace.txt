prgm program
id_lst input
id_lstT ,
id_lstT )
prgmT var
decs var
type integer
std_type integer
decsT var
type real
std_type real
decsT var
type array
std_type integer
decsT functionpк
prgmTT functionpк
sub_decs functionpк
sub_dec functionpк
sub_head functionpк
sub_headT (
args (
param_lst x
type integer
std_type integer
param_lstT ;
type integer
std_type integer
param_lstT )
std_type real
sub_decT var
decs var
type real
std_type real
decsT begin
sub_decTT begin
cmpd_stmt begin
cmpd_stmtT a
opt_stmt a
stmt_lst a
stmt a
var a
varT :=
expr fun1
smpl_expr fun1
term fun1
factor fun1
factorT (
expr_lst x
expr x
smpl_expr x
term x
factor x
factorT ,
termT ,
smpl_exprT ,
exprT ,
expr_lstT ,
expr e
smpl_expr e
term e
factor e
factorT ,
termT ,
smpl_exprT ,
exprT ,
expr_lstT ,
expr c
smpl_expr c
term c
factor c
factorT ,
termT ,
smpl_exprT ,
exprT ,
expr_lstT ,
expr b
smpl_expr b
term b
factor b
factorT )
termT )
smpl_exprT )
exprT )
expr_lstT )
termT ;
smpl_exprT ;
exprT ;
stmt_lstT ;
stmt x
var x
varT :=
expr fun3
smpl_expr fun3
term fun3
factor fun3
factorT (
expr_lst c
expr c
smpl_expr c
term c
factor c
factorT [
expr 1
smpl_expr 1
term 1
factor 1
termT ]
smpl_exprT ]
exprT ]
termT ,
smpl_exprT ,
exprT ,
expr_lstT ,
expr e
smpl_expr e
term e
factor e
factorT )
termT )
smpl_exprT )
exprT )
expr_lstT )
termT ;
smpl_exprT ;
exprT ;
stmt_lstT ;
stmt e
var e
varT :=
expr e
smpl_expr e
term e
factor e
factorT +
termT +
smpl_exprT +
term 4.44
factor 4.44
termT ;
smpl_exprT ;
exprT ;
stmt_lstT ;
stmt a
var a
varT :=
expr (
smpl_expr (
term (
factor (
expr a
smpl_expr a
term a
factor a
factorT mod
termT mod
factor y
factorT )
termT )
smpl_exprT )
exprT )
termT div
factor x
factorT ;
termT ;
smpl_exprT ;
exprT ;
stmt_lstT ;
stmt while
expr (
smpl_expr (
term (
factor (
expr (
smpl_expr (
term (
factor (
expr a
smpl_expr a
term a
factor a
factorT >=
termT >=
smpl_exprT >=
exprT >=
smpl_expr 4.3
term 4.3
factor 4.3
termT )
smpl_exprT )
termT and
factor (
expr (
smpl_expr (
term (
factor (
expr b
smpl_expr b
term b
factor b
factorT <=
termT <=
smpl_exprT <=
exprT <=
smpl_expr e
term e
factor e
factorT )
termT )
smpl_exprT )
termT or
smpl_exprT or
term (
factor (
expr not
smpl_expr not
term not
factor not
factorT (
expr_lst a
expr a
smpl_expr a
term a
factor a
factorT =
termT =
smpl_exprT =
exprT =
smpl_expr c
term c
factor c
factorT [
expr a
smpl_expr a
term a
factor a
factorT ]
termT ]
smpl_exprT ]
exprT ]
termT )
smpl_exprT )
expr_lstT )
termT )
smpl_exprT )
exprT )
termT )
smpl_exprT )
exprT )
termT )
smpl_exprT )
exprT )
termT do
smpl_exprT do
exprT do
stmt begin
cmpd_stmt begin
cmpd_stmtT a
opt_stmt a
stmt_lst a
stmt a
var a
varT :=
expr c
smpl_expr c
term c
factor c
factorT [
expr a
smpl_expr a
term a
factor a
factorT ]
termT ]
smpl_exprT ]
exprT ]
termT +
smpl_exprT +
term 1
factor 1
termT end
smpl_exprT end
exprT end
stmt_lstT end
stmt_lstT end break no tok consumption
stmt_lstT ;
stmt fun2
var fun2
varT :=
expr 2.5
smpl_expr 2.5
term 2.5
factor 2.5
termT end
smpl_exprT end
exprT end
stmt_lstT end
stmt_lstT end break no tok consumption
sub_decsT begin
cmpd_stmt begin
cmpd_stmtT b
opt_stmt b
stmt_lst b
stmt b
var b
varT :=
expr fun2
smpl_expr fun2
term fun2
factor fun2
factorT (
expr_lst c
expr c
smpl_expr c
term c
factor c
factorT [
expr 4
smpl_expr 4
term 4
factor 4
termT ]
smpl_exprT ]
exprT ]
termT ,
smpl_exprT ,
exprT ,
expr_lstT ,
expr f
smpl_expr f
term f
factor f
factorT [
expr 5
smpl_expr 5
term 5
factor 5
termT ]
smpl_exprT ]
exprT ]
termT )
smpl_exprT )
exprT )
expr_lstT )
termT ;
smpl_exprT ;
exprT ;
stmt_lstT ;
stmt b
var b
varT :=
expr fun2
smpl_expr fun2
term fun2
factor fun2
factorT (
expr_lst c
expr c
smpl_expr c
term c
factor c
factorT [
expr 4
smpl_expr 4
term 4
factor 4
termT ]
smpl_exprT ]
exprT ]
termT ,
smpl_exprT ,
exprT ,
expr_lstT ,
expr 2
smpl_expr 2
term 2
factor 2
termT )
smpl_exprT )
exprT )
expr_lstT )
termT ;
smpl_exprT ;
exprT ;
stmt_lstT ;
stmt if
expr (
smpl_expr (
term (
factor (
expr a
smpl_expr a
term a
factor a
factorT <
termT <
smpl_exprT <
exprT <
smpl_expr 2
term 2
factor 2
termT )
smpl_exprT )
termT then
smpl_exprT then
exprT then
stmt a
var a
varT :=
expr 1
smpl_expr 1
term 1
factor 1
termT else
smpl_exprT else
exprT else
stmtT else
stmt a
var a
varT :=
expr a
smpl_expr a
term a
factor a
factorT [
expr 2
smpl_expr 2
term 2
factor 2
termT ]
smpl_exprT ]
exprT ]
termT ;
smpl_exprT ;
exprT ;
stmt_lstT ;
stmt if
expr (
smpl_expr (
term (
factor (
expr b
smpl_expr b
term b
factor b
factorT >
termT >
smpl_exprT >
exprT >
smpl_expr 4.2
term 4.2
factor 4.2
termT )
smpl_exprT )
termT then
smpl_exprT then
exprT then
stmt a
var a
varT :=
expr c
smpl_expr c
term c
factor c
factorT [
expr a
smpl_expr a
term a
factor a
factorT ]
termT ]
smpl_exprT ]
exprT ]
termT end
smpl_exprT end
exprT end
stmtT end
stmt_lstT end
stmt_lstT end break no tok consumption
